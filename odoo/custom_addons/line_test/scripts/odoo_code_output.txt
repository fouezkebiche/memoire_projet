







// [Folder] models








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\models\line_management.py
# -*- coding: utf-8 -*-

from odoo import models, fields, api
from odoo.exceptions import UserError, AccessError
import requests
import logging
import time

_logger = logging.getLogger(__name__)

class LineManagement(models.Model):
    _name = 'line.management'
    _description = 'Transport Line'
    _rec_name = 'code'
    _order = 'code asc'

    # Basic Information
    api_id = fields.Integer(string='API ID', index=True, readonly=True, help="ID from the external API")
    code = fields.Char(string='Line Code', required=True, index=True)
    color = fields.Char(string='Color')
    enterprise_code = fields.Char(string='Enterprise Code')
    line_type = fields.Selection(
        [('1', 'Type 1'), ('2', 'Type 2')],
        string='Line Type'
    )
    active = fields.Boolean(string='Active', default=True)

    # Departure Station Information
    departure_station = fields.Char(string='Departure Station (EN)')
    departure_station_ar = fields.Char(string='Departure Station (AR)')
    departure_station_fr = fields.Char(string='Departure Station (FR)')
    departure_lat = fields.Float(string='Departure Latitude', digits=(10, 7))
    departure_lng = fields.Float(string='Departure Longitude', digits=(10, 7))

    # Terminus Station Information
    terminus_station = fields.Char(string='Terminus Station (EN)')
    terminus_station_ar = fields.Char(string='Terminus Station (AR)')
    terminus_station_fr = fields.Char(string='Terminus Station (FR)')
    terminus_lat = fields.Float(string='Terminus Latitude', digits=(10, 7))
    terminus_lng = fields.Float(string='Terminus Longitude', digits=(10, 7))

    # Schedule Information
    schedule = fields.Text(string='Schedule Summary')
    schedule_ids = fields.One2many(
        'line.schedule', 'line_id', string='Detailed Schedule',
        help="Detailed departure times for this line"
    )

    def _prepare_api_data(self):
        """ Prepare data for API create/update """
        self.ensure_one()
        departure = {
            'nameEn': self.departure_station,
            'nameAr': self.departure_station_ar,
            'nameFr': self.departure_station_fr,
            'lat': self.departure_lat,
            'lng': self.departure_lng,
        }
        terminus = {
            'nameEn': self.terminus_station,
            'nameAr': self.terminus_station_ar,
            'nameFr': self.terminus_station_fr,
            'lat': self.terminus_lat,
            'lng': self.terminus_lng,
        }
        schedule_times = [s.time for s in self.schedule_ids if s.time]
        
        return {
            'code': self.code,
            'color': self.color or '',
            'enterpriseCode': self.enterprise_code or '',
            'lineType': int(self.line_type) if self.line_type else None,
            'departureStation': departure,
            'terminusStation': terminus,
            'schedule': schedule_times,
            'lineStations': [],  # Add logic for line stations if needed
        }

    def _make_api_request(self, method, url, data=None, retries=3, timeout=15):
        """ Helper method to make API requests with retries """
        for attempt in range(retries):
            try:
                if method == 'GET':
                    response = requests.get(url, timeout=timeout)
                elif method == 'POST':
                    response = requests.post(url, json=data, timeout=timeout)
                elif method == 'PUT':
                    response = requests.put(url, json=data, timeout=timeout)
                elif method == 'DELETE':
                    response = requests.delete(url, timeout=timeout)
                else:
                    raise ValueError("Unsupported HTTP method")
                
                response.raise_for_status()
                return response
            except requests.exceptions.ConnectTimeout as e:
                _logger.warning("API request timed out (attempt %s/%s): %s", attempt + 1, retries, e)
                if attempt == retries - 1:
                    raise UserError("Cannot connect to the API server. Please check your network or try again later.")
                time.sleep(2 ** attempt)  # Exponential backoff
            except requests.exceptions.HTTPError as e:
                if response.status_code == 404:
                    raise UserError("Resource not found in the API.")
                raise UserError(f"API error: {e}")
            except requests.exceptions.RequestException as e:
                _logger.warning("API request failed (attempt %s/%s): %s", attempt + 1, retries, e)
                if attempt == retries - 1:
                    raise UserError(f"Failed to communicate with the API: {e}")
                time.sleep(2 ** attempt)
        return None

    @api.model
    def create_line_in_api(self, vals):
        """ Create a new line in the external API """
        url = "http://147.93.52.105:8082/infra/line"
        try:
            # Prepare API data from vals
            departure = {
                'nameEn': vals.get('departure_station'),
                'nameAr': vals.get('departure_station_ar'),
                'nameFr': vals.get('departure_station_fr'),
                'lat': vals.get('departure_lat'),
                'lng': vals.get('departure_lng'),
            }
            terminus = {
                'nameEn': vals.get('terminus_station'),
                'nameAr': vals.get('terminus_station_ar'),
                'nameFr': vals.get('terminus_station_fr'),
                'lat': vals.get('terminus_lat'),
                'lng': vals.get('terminus_lng'),
            }
            schedule_times = vals.get('schedule', '').split(', ') if vals.get('schedule') else []
            api_data = {
                'code': vals.get('code'),
                'color': vals.get('color', ''),
                'enterpriseCode': vals.get('enterprise_code', ''),
                'lineType': int(vals.get('line_type')) if vals.get('line_type') else None,
                'departureStation': departure,
                'terminusStation': terminus,
                'schedule': schedule_times,
                'lineStations': [],  # Add logic for line stations if needed
            }

            response = self._make_api_request('POST', url, data=api_data)
            api_id = response.json().get('id') if response.json() else None
            _logger.info("Created line in API: %s", api_data.get('code'))
            return api_id
        except UserError as e:
            raise
        except Exception as e:
            _logger.error("Failed to create line in API: %s", e)
            raise UserError(f"Failed to create line in API: {e}")

    def update_line_in_api(self):
        """ Update an existing line in the external API """
        self.ensure_one()
        if not self.api_id:
            raise UserError("Cannot update line: API ID is missing.")
        
        url = f"http://147.93.52.105:8082/infra/line/{self.api_id}"
        try:
            api_data = self._prepare_api_data()
            self._make_api_request('PUT', url, data=api_data)
            _logger.info("Updated line in API: %s", self.code)
        except UserError as e:
            raise
        except Exception as e:
            _logger.error("Failed to update line in API: %s", e)
            raise UserError(f"Failed to update line in API: {e}")

    def delete_line_in_api(self):
        """ Delete a line in the external API """
        self.ensure_one()
        if not self.api_id:
            raise UserError("Cannot delete line: API ID is missing.")
        
        url = f"http://147.93.52.105:8082/infra/line/{self.api_id}"
        try:
            self._make_api_request('DELETE', url)
            _logger.info("Deleted line in API: %s", self.code)
        except UserError as e:
            raise
        except Exception as e:
            _logger.error("Failed to delete line in API: %s", e)
            raise UserError(f"Failed to delete line in API: {e}")

    @api.model
    def sync_lines_from_api(self):
        """ Synchronize transport lines from external API """
        if self.env.context.get('skip_sync'):
            _logger.info("Skipping API sync due to context")
            return {'type': 'ir.actions.act_window_close'}

        url = "http://147.93.52.105:8082/infra/line"
        try:
            response = self._make_api_request('GET', url)
            lines = response.json()

            existing_lines = self.search([])
            existing_api_ids = existing_lines.mapped('api_id')
            api_ids = [line.get('id') for line in lines]

            # Deactivate lines not in API
            lines_to_deactivate = existing_lines.filtered(
                lambda l: l.api_id not in api_ids
            )
            lines_to_deactivate.write({'active': False})

            for line in lines:
                departure = line.get('departureStation', {})
                terminus = line.get('terminusStation', {})
                
                # Prepare schedule data
                schedule_times = line.get('schedule', [])
                schedule_vals = [(5, 0, 0)]  # Clear existing schedules
                for time in schedule_times:
                    schedule_vals.append((0, 0, {
                        'time': time,
                        'direction': 'GOING'
                    }))
                
                vals = {
                    'api_id': line.get('id'),
                    'code': line.get('code'),
                    'color': line.get('color'),
                    'enterprise_code': line.get('enterpriseCode'),
                    'line_type': str(line.get('lineType')),
                    'departure_station': departure.get('nameEn'),
                    'departure_station_ar': departure.get('nameAr'),
                    'departure_station_fr': departure.get('nameFr'),
                    'departure_lat': departure.get('lat'),
                    'departure_lng': departure.get('lng'),
                    'terminus_station': terminus.get('nameEn'),
                    'terminus_station_ar': terminus.get('nameAr'),
                    'terminus_station_fr': terminus.get('nameFr'),
                    'terminus_lat': terminus.get('lat'),
                    'terminus_lng': terminus.get('lng'),
                    'schedule': ", ".join(schedule_times),
                    'schedule_ids': schedule_vals,
                    'active': True,
                }

                # Update or create record
                existing_line = self.search([('api_id', '=', line.get('id'))], limit=1)
                if existing_line:
                    existing_line.write(vals)
                else:
                    self.with_context(skip_sync=True).create(vals)

            return {
                'effect': {
                    'fadeout': 'slow',
                    'message': 'Lines synchronized successfully!',
                    'type': 'rainbow_man',
                }
            }

        except UserError as e:
            raise
        except Exception as e:
            _logger.error("Failed to sync lines from API: %s", e)
            raise UserError(f"Failed to sync lines from API: {e}")

    @api.model
    def create(self, vals):
        """ Override create to sync with API """
        if not self.env.user.has_group('base.group_system'):
            raise AccessError("Only managers can create lines.")
        
        api_id = self.create_line_in_api(vals)
        if api_id:
            vals['api_id'] = api_id
        record = super(LineManagement, self).create(vals)
        try:
            self.with_context(skip_sync=True).sync_lines_from_api()
        except UserError as e:
            _logger.warning("Post-create sync failed: %s", e)
        return record

    def write(self, vals):
        """ Override write to sync with API """
        if not self.env.user.has_group('base.group_system'):
            raise AccessError("Only managers can update lines.")
        
        for record in self:
            if record.api_id:
                record.update_line_in_api()
        result = super(LineManagement, self).write(vals)
        try:
            self.with_context(skip_sync=True).sync_lines_from_api()
        except UserError as e:
            _logger.warning("Post-update sync failed: %s", e)
        return result

    def unlink(self):
        """ Override unlink to sync with API """
        if not self.env.user.has_group('base.group_system'):
            raise AccessError("Only managers can delete lines.")
        
        for record in self:
            if record.api_id:
                record.delete_line_in_api()
        result = super(LineManagement, self).unlink()
        try:
            self.env['line.management'].with_context(skip_sync=True).sync_lines_from_api()
        except UserError as e:
            _logger.warning("Post-delete sync failed: %s", e)
        return result







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\models\line_schedule.py
# -*- coding: utf-8 -*-

from odoo import models, fields, api

class LineSchedule(models.Model):
    _name = 'line.schedule'
    _description = 'Line Schedule Details'
    _order = 'time asc'

    line_id = fields.Many2one('line.management', string='Line', ondelete='cascade')
    time = fields.Char(string='Departure Time', required=True)
    direction = fields.Selection(
        [('GOING', 'Going'), ('RETURN', 'Return')],
        string='Direction',
        default='GOING',
        required=True
    )







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\models\line_station.py
# -*- coding: utf-8 -*-

from odoo import models, fields, api
from odoo.exceptions import UserError
import requests
import logging

_logger = logging.getLogger(__name__)

class LineStation(models.Model):
    _name = 'line.station'
    _description = 'Line Station Details'
    _order = 'order asc'

    line_id = fields.Many2one('line.management', string='Line', required=True, ondelete='cascade')
    order = fields.Integer(string='Order', required=True)
    stop_duration = fields.Integer(string='Stop Duration (seconds)')
    direction = fields.Selection(
        [('GOING', 'Going'), ('RETURNING', 'Returning')],
        string='Direction',
        default='GOING',
        required=True
    )
    station_name_en = fields.Char(string='Station Name (EN)')
    station_name_ar = fields.Char(string='Station Name (AR)')
    station_name_fr = fields.Char(string='Station Name (FR)')
    lat = fields.Float(string='Latitude', digits=(10, 7))
    lng = fields.Float(string='Longitude', digits=(10, 7))
    radius = fields.Integer(string='Radius (meters)')
    alertable = fields.Boolean(string='Alertable')
    efficient = fields.Boolean(string='Efficient')
    duration = fields.Integer(string='Duration (minutes)')
    api_id = fields.Integer(string='API ID', index=True, help="ID from the external API")

    @api.model
    def sync_line_stations_from_api(self):
        """ Synchronize line stations from external API by iterating over IDs """
        base_url = "http://147.93.52.105:8082/infra/linestation/"
        max_id = 50  # Reduced for testing; increase as needed
        try:
            existing_stations = self.search([])
            existing_api_ids = existing_stations.mapped('api_id')
            fetched_stations = []

            _logger.info("Starting line station sync from API: %s", base_url)
            # Fetch data for each ID
            for station_id in range(1, max_id + 1):
                try:
                    _logger.debug("Fetching station ID %s", station_id)
                    response = requests.get(f"{base_url}{station_id}", timeout=5)
                    _logger.debug("Response status for ID %s: %s", station_id, response.status_code)
                    
                    if response.status_code == 200:
                        try:
                            station_data = response.json()
                            _logger.debug("Station data for ID %s: %s", station_id, station_data)
                            fetched_stations.append(station_data)
                        except ValueError:
                            _logger.warning("Invalid JSON response for station ID %s", station_id)
                            continue
                    else:
                        _logger.info("No station found for ID %s (Status: %s)", station_id, response.status_code)
                except requests.exceptions.RequestException as e:
                    _logger.warning("Failed to fetch station ID %s: %s", station_id, e)
                    continue

            _logger.info("Fetched %s stations from API", len(fetched_stations))
            # Process fetched stations
            for station in fetched_stations:
                line_data = station.get('line', {})
                station_data = station.get('station', {})
                
                # Validate required data
                if not line_data or not station_data:
                    _logger.warning("Missing line or station data for station ID %s", station.get('id'))
                    continue

                # Find the corresponding line
                line_code = line_data.get('code')
                line = self.env['line.management'].search([('code', '=', line_code)], limit=1)
                if not line:
                    _logger.warning("Line with code %s not found for station ID %s", line_code, station.get('id'))
                    continue

                vals = {
                    'api_id': station.get('id'),
                    'line_id': line.id,
                    'order': station.get('order'),
                    'stop_duration': station.get('stopDuration'),
                    'direction': station.get('direction'),
                    'station_name_en': station_data.get('nameEn'),
                    'station_name_ar': station_data.get('nameAr'),
                    'station_name_fr': station_data.get('nameFr'),
                    'lat': station.get('lat'),
                    'lng': station.get('lng'),
                    'radius': station.get('radius'),
                    'alertable': station.get('alertable'),
                    'efficient': station.get('efficient'),
                    'duration': station.get('duration'),
                }

                # Update or create record
                existing_station = self.search([('api_id', '=', station.get('id'))], limit=1)
                if existing_station:
                    _logger.debug("Updating station ID %s", station.get('id'))
                    existing_station.write(vals)
                else:
                    _logger.debug("Creating station ID %s", station.get('id'))
                    self.create(vals)

            # Deactivate stations not in fetched data
            fetched_api_ids = [station.get('id') for station in fetched_stations]
            stations_to_deactivate = existing_stations.filtered(
                lambda s: s.api_id not in fetched_api_ids
            )
            if stations_to_deactivate:
                _logger.info("Deactivating %s stations not in API", len(stations_to_deactivate))
                stations_to_deactivate.unlink()  # Or set active=False if preferred

            _logger.info("Line station sync completed successfully")
            return {
                'effect': {
                    'fadeout': 'slow',
                    'message': 'Line stations synchronized successfully!',
                    'type': 'rainbow_man',
                }
            }

        except Exception as e:
            _logger.error("Unexpected error during line station sync: %s", e)
            raise UserError(f"Unexpected error during sync: {e}")







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\models\__init__.py
from . import line_management
from . import line_station
from . import line_schedule









// [Folder] security








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\security\ir.model.access.csv
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_line_management_user,line.management.user,model_line_management,base.group_user,1,1,1,0
access_line_management_manager,line.management.manager,model_line_management,base.group_system,1,1,1,1
access_line_schedule_user,line.schedule.user,model_line_schedule,base.group_user,1,1,1,0
access_line_schedule_manager,line.schedule.manager,model_line_schedule,base.group_system,1,1,1,1
access_line_station_user,line.station.user,model_line_station,base.group_user,1,1,1,0
access_line_station_manager,line.station.manager,model_line_station,base.group_system,1,1,1,1













// [Folder] static








//   [Folder] src








//     [Folder] xml








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\static\src\xml\line_map_templates.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="line_test.LineMapTemplate">
        <div class="o_line_map_container" style="height: 100%; width: 100%;">
            <div t-ref="map" id="map" style="height: 600px; width: 100%;"></div>
        </div>
    </t>
</templates>













// [Folder] views








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\views\line_management_views.xml
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Tree View -->
    <record id="view_line_management_tree" model="ir.ui.view">
        <field name="name">line.management.tree</field>
        <field name="model">line.management</field>
        <field name="arch" type="xml">
            <tree>
                <field name="code"/>
                <field name="enterprise_code"/>
                <field name="departure_station"/>
                <field name="terminus_station"/>
                <field name="line_type"/>
                <field name="active" widget="boolean_button"/>
            </tree>
        </field>
    </record>

    <!-- Form View -->
    <record id="view_line_management_form" model="ir.ui.view">
        <field name="name">line.management.form</field>
        <field name="model">line.management</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="sync_lines_from_api" type="object" string="Sync Now" class="oe_highlight"/>
                    <field name="active" widget="boolean_button"/>
                </header>
                <sheet>
                    <group string="Basic Information" col="4">
                        <field name="code"/>
                        <field name="color" widget="color"/>
                        <field name="enterprise_code"/>
                        <field name="line_type"/>
                    </group>

                    <notebook>
                        <page string="Departure Station">
                            <group col="4">
                                <field name="departure_station"/>
                                <field name="departure_station_ar"/>
                                <field name="departure_station_fr"/>
                                <field name="departure_lat"/>
                                <field name="departure_lng"/>
                            </group>
                        </page>

                        <page string="Terminus Station">
                            <group col="4">
                                <field name="terminus_station"/>
                                <field name="terminus_station_ar"/>
                                <field name="terminus_station_fr"/>
                                <field name="terminus_lat"/>
                                <field name="terminus_lng"/>
                            </group>
                        </page>

                        <page string="Schedule">
                            <group>
                                <field name="schedule" widget="text"/>
                            </group>
                            <field name="schedule_ids">
                                <tree>
                                    <field name="time"/>
                                    <field name="direction"/>
                                </tree>
                            </field>
                        </page>
                    </notebook>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Action -->
    <record id="view_line_management_action" model="ir.actions.act_window">
        <field name="name">Transport Lines</field>
        <field name="res_model">line.management</field>
        <field name="view_mode">tree,form</field>
        <field name="context">{'search_default_active': 1}</field>
    </record>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\views\line_map_action.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="action_line_map" model="ir.actions.client">
        <field name="name">Line Map</field>
        <field name="tag">line_map_tag</field>
    </record>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\views\line_menu.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <menuitem id="line_management_menu_root" name="Line Management"/>
    <menuitem id="line_management_menu" name="Lines" parent="line_management_menu_root" action="view_line_management_action"/>
    <menuitem id="line_map_menu" name="Line Map" parent="line_management_menu_root" action="action_line_map" sequence="10"/>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\views\line_station_views.xml
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Tree View -->
    <record id="view_line_station_tree" model="ir.ui.view">
        <field name="name">line.station.tree</field>
        <field name="model">line.station</field>
        <field name="arch" type="xml">
            <tree>
                <field name="line_id"/>
                <field name="station_name_en"/>
                <field name="order"/>
                <field name="direction"/>
                <field name="lat"/>
                <field name="lng"/>
            </tree>
        </field>
    </record>

    <!-- Form View -->
    <record id="view_line_station_form" model="ir.ui.view">
        <field name="name">line.station.form</field>
        <field name="model">line.station</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="sync_line_stations_from_api" type="object" string="Sync Now" class="oe_highlight"/>
                </header>
                <sheet>
                    <group string="Basic Information" col="4">
                        <field name="line_id"/>
                        <field name="order"/>
                        <field name="stop_duration"/>
                        <field name="direction"/>
                    </group>
                    <group string="Station Details" col="4">
                        <field name="station_name_en"/>
                        <field name="station_name_ar"/>
                        <field name="station_name_fr"/>
                        <field name="lat"/>
                        <field name="lng"/>
                        <field name="radius"/>
                    </group>
                    <group string="Additional Information" col="4">
                        <field name="alertable"/>
                        <field name="efficient"/>
                        <field name="duration"/>
                        <field name="api_id" readonly="1"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Action -->
    <record id="view_line_station_action" model="ir.actions.act_window">
        <field name="name">Line Stations</field>
        <field name="res_model">line.station</field>
        <field name="view_mode">tree,form</field>
    </record>

    <!-- Menu -->
    <menuitem id="line_station_menu" name="Line Stations" parent="line_management_menu_root" action="view_line_station_action" sequence="15"/>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\views\line_sync_action.xml
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Server Action for Lines -->
    <record id="action_sync_lines_from_api" model="ir.actions.server">
        <field name="name">Sync Lines from API</field>
        <field name="model_id" ref="model_line_management"/>
        <field name="state">code</field>
        <field name="code">
model.sync_lines_from_api()
        </field>
    </record>

    <!-- Server Action for Line Stations -->
    <record id="action_sync_line_stations_from_api" model="ir.actions.server">
        <field name="name">Sync Line Stations from API</field>
        <field name="model_id" ref="model_line_station"/>
        <field name="state">code</field>
        <field name="code">
model.sync_line_stations_from_api()
        </field>
    </record>

    <!-- Menu to trigger sync -->
    <menuitem id="menu_sync_lines_action"
              name="Sync Lines from API"
              parent="line_management_menu_root"
              action="action_sync_lines_from_api"
              sequence="20"/>
    <menuitem id="menu_sync_line_stations_action"
              name="Sync Line Stations from API"
              parent="line_management_menu_root"
              action="action_sync_line_stations_from_api"
              sequence="25"/>
</odoo>









// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\__init__.py
from . import models







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\line_test\__manifest__.py
{
    'name': 'Line test',
    'version': '1.0',
    'summary': 'Manage transport lines from external infrastructure API',
    'author': 'Your Name',
    'category': 'Transport',
    'depends': ['base'],
    'data': [
        'security/ir.model.access.csv',
        'views/line_management_views.xml',
        'views/line_station_views.xml',
        'views/line_sync_action.xml',
        'views/line_map_action.xml',
        'views/line_menu.xml',
    ],
    'assets': {
        'web.assets_backend': [
            'line_test/static/src/js/line_map.js',
            'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js',
            'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css',
            'line_test/static/src/xml/line_map_templates.xml',
            'line_test/static/src/css/line_map.css',
        ],
    },
    'py_files': [
        'models/line_management.py',
        'models/line_schedule.py',
        'models/line_station.py',  # Include if not already separate
    ],
    'installable': True,
    'application': True,
}