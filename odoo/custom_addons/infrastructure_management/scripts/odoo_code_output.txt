







// [Folder] data








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\data\cron.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data noupdate="0">
        <!-- Sync Stations Cron -->
        <record id="cron_sync_stations" model="ir.cron">
            <field name="name">Sync Infrastructure Stations</field>
            <field name="model_id" ref="infrastructure_management.model_infrastructure_station"/>
            <field name="state">code</field>
            <field name="code">model.sync_stations_from_api()</field>
            <field name="interval_number">5</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active" eval="True"/>
            <field name="doall">True</field>
            <field name="priority">10</field>
        </record>

        <!-- Sync Lines Cron -->
        <record id="cron_sync_lines" model="ir.cron">
            <field name="name">Sync Infrastructure Lines</field>
            <field name="model_id" ref="infrastructure_management.model_infrastructure_line"/>
            <field name="state">code</field>
            <field name="code">model.sync_lines_from_api()</field>
            <field name="interval_number">5</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active" eval="True"/>
            <field name="doall">True</field>
            <field name="priority">20</field>
        </record>

        <!-- Sync Line Stations Cron -->
        <record id="cron_sync_line_stations" model="ir.cron">
            <field name="name">Sync Infrastructure Line Stations</field>
            <field name="model_id" ref="infrastructure_management.model_infrastructure_line_station"/>
            <field name="state">code</field>
            <field name="code">model.sync_linestations_from_api()</field>
            <field name="interval_number">5</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active" eval="True"/>
            <field name="doall">True</field>
            <field name="priority">30</field>
        </record>
    </data>
</odoo>









// [Folder] models








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\models\line.py
import requests
import json
import logging
import re
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError
from datetime import datetime
from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT

_logger = logging.getLogger(__name__)

class InfrastructureLine(models.Model):
    _name = 'infrastructure.line'
    _description = 'Infrastructure Line'
    _rec_name = 'enterprise_code'

    code = fields.Char(string='Code', required=True)
    color = fields.Char(string='Color', required=True, default='#FF0000')  # Reverted to Char
    enterprise_code = fields.Char(string='Enterprise Code', required=True)
    line_type = fields.Selection(
        [('1', 'Bus'), ('2', 'Metro'), ('3', 'Tram')],
        string='Line Type',
        default='1',
        required=True
    )
    departure_station_id = fields.Many2one(
        'infrastructure.station',
        string='Departure Station',
        required=True
    )
    terminus_station_id = fields.Many2one(
        'infrastructure.station',
        string='Terminus Station',
        required=True
    )
    schedule = fields.Text(string='Schedule')
    external_id = fields.Integer(string='External API ID', readonly=True)

    def name_get(self):
        result = []
        for line in self:
            name = line.enterprise_code or line.code or f'Line {line.id}'
            _logger.debug("name_get for line ID %s: %s", line.id, name)
            result.append((line.id, name))
        return result

    @api.constrains('color')
    def _check_color(self):
        for record in self:
            if not re.match(r'^#[0-9A-Fa-f]{6}$', record.color):
                raise ValidationError("Color must be a valid hex code (e.g., #FF0000).")

    def _prepare_station_data(self, station):
        return {
            'id': station.external_id or station.id,
            'nameAr': station.name_ar or '',
            'nameEn': station.name_en or '',
            'nameFr': station.name_fr or '',
            'lat': station.latitude or 0.0,
            'lng': station.longitude or 0.0,
            'paths': json.loads(station.paths) if station.paths else [],
            'lines': [line.external_id or line.id for line in station.line_ids],
            'schedule': json.loads(station.schedule) if station.schedule else [],
            'changes': None  # Align with API response
        }

    @api.model
    def create(self, vals):
        if vals.get('schedule'):
            try:
                json.loads(vals['schedule'])
            except json.JSONDecodeError:
                raise UserError("Schedule must be valid JSON (e.g., '[\"08:00\", \"09:00\"]').")

        # Validate color format
        if 'color' in vals:
            if not re.match(r'^#[0-9A-Fa-f]{6}$', vals['color']):
                raise UserError("Color must be a valid hex code (e.g., #FF0000).")

        with self.env.cr.savepoint():
            record = super(InfrastructureLine, self).create(vals)

        departure_station = self.env['infrastructure.station'].browse(record.departure_station_id.id)
        terminus_station = self.env['infrastructure.station'].browse(record.terminus_station_id.id)

        api_data = {
            'code': record.code,
            'color': record.color,  # Use hex code directly
            'lineType': int(record.line_type),
            'enterpriseCode': record.enterprise_code,
            'departureStation': self._prepare_station_data(departure_station),
            'terminusStation': self._prepare_station_data(terminus_station),
            'lineStations': [
                {
                    'order': 1,
                    'stopDuration': 0,
                    'direction': 'GOING',
                    'station': self._prepare_station_data(departure_station),
                    'radius': 0,
                    'lat': departure_station.latitude or 0.0,
                    'lng': departure_station.longitude or 0.0,
                    'alertable': False,
                    'efficient': True,
                    'duration': 0
                },
                {
                    'order': 2,
                    'stopDuration': 0,
                    'direction': 'GOING',
                    'station': self._prepare_station_data(terminus_station),
                    'radius': 0,
                    'lat': terminus_station.latitude or 0.0,
                    'lng': terminus_station.longitude or 0.0,
                    'alertable': False,
                    'efficient': True,
                    'duration': 0
                }
            ],
            'schedule': json.loads(record.schedule) if record.schedule else []
        }

        try:
            api_url = 'http://147.93.52.105:9000/infra/line'
            payload = json.dumps(api_data, ensure_ascii=False).encode('utf-8')
            _logger.info("Sending POST request to: %s with payload: %s", api_url, payload.decode('utf-8'))
            response = requests.post(
                api_url,
                headers={'Content-Type': 'application/json; charset=utf-8'},
                data=payload,
                timeout=10
            )
            _logger.info("API POST %s response: %s (Status: %s)", api_url, response.text, response.status_code)
            if response.status_code == 201:
                try:
                    response_data = response.json()
                    external_id = response_data.get('id')
                    if not external_id:
                        raise ValueError("No external_id found in JSON response")
                except json.JSONDecodeError:
                    response_text = response.text.strip()
                    if "Line created with id:" in response_text:
                        try:
                            external_id = int(response_text.split("Line created with id:")[1].strip())
                        except (IndexError, ValueError):
                            _logger.error("Unable to parse external_id from text response: %s", response_text)
                            raise UserError(f"Failed to parse external_id from API response: {response_text}")
                    else:
                        _logger.error("Unexpected response format: %s", response_text)
                        raise UserError(f"Unexpected API response format: {response_text}")

                self._cr.execute('UPDATE infrastructure_line SET external_id = %s WHERE id = %s', (external_id, record.id))
                _logger.info("Assigned external_id %s to line %s", external_id, record.enterprise_code or record.code)
            else:
                _logger.warning("Failed to create line in API: %s (Status: %s). Line created in Odoo.", response.text, response.status_code)
        except (requests.RequestException, UserError) as e:
            _logger.error("API POST request failed: %s. Line created in Odoo without external_id.", str(e))

        return record

    def write(self, vals):
        if 'color' in vals:
            if not re.match(r'^#[0-9A-Fa-f]{6}$', vals['color']):
                raise UserError("Color must be a valid hex code (e.g., #FF0000).")

        if vals.get('schedule'):
            try:
                json.loads(vals['schedule'])
            except json.JSONDecodeError:
                raise UserError("Schedule must be valid JSON (e.g., '[\"08:00\", \"09:00\"]').")

        result = super(InfrastructureLine, self).write(vals)

        for record in self:
            if not record.external_id:
                _logger.warning("Skipping API update for line %s: No external_id.", record.enterprise_code or record.code)
                continue

            departure_station = self.env['infrastructure.station'].browse(record.departure_station_id.id)
            terminus_station = self.env['infrastructure.station'].browse(record.terminus_station_id.id)

            api_data = {
                'code': record.code,
                'color': record.color,
                'lineType': int(record.line_type),
                'enterpriseCode': record.enterprise_code,
                'departureStation': self._prepare_station_data(departure_station),
                'terminusStation': self._prepare_station_data(terminus_station),
                'lineStations': [
                    {
                        'order': 1,
                        'stopDuration': 0,
                        'direction': 'GOING',
                        'station': self._prepare_station_data(departure_station),
                        'radius': 0,
                        'lat': departure_station.latitude or 0.0,
                        'lng': departure_station.longitude or 0.0,
                        'alertable': False,
                        'efficient': True,
                        'duration': 0
                    },
                    {
                        'order': 2,
                        'stopDuration': 0,
                        'direction': 'GOING',
                        'station': self._prepare_station_data(terminus_station),
                        'radius': 0,
                        'lat': terminus_station.latitude or 0.0,
                        'lng': terminus_station.longitude or 0.0,
                        'alertable': False,
                        'efficient': True,
                        'duration': 0
                    }
                ],
                'schedule': json.loads(record.schedule) if record.schedule else []
            }

            try:
                api_url = f'http://147.93.52.105:9000/infra/line/{record.external_id}'
                payload = json.dumps(api_data, ensure_ascii=False).encode('utf-8')
                _logger.info("Sending PUT request to: %s with payload: %s", api_url, payload.decode('utf-8'))
                response = requests.put(
                    api_url,
                    headers={'Content-Type': 'application/json; charset=utf-8'},
                    data=payload,
                    timeout=10
                )
                _logger.info("API PUT %s response: %s (Status: %s)", api_url, response.text, response.status_code)
                if response.status_code not in (200, 201, 204):
                    raise UserError(f"Failed to update line in API: {response.text} (Status: {response.status_code})")
            except requests.RequestException as e:
                _logger.error("API PUT request failed: %s", str(e))
                raise UserError(f"API request failed: {str(e)}")

        return result

    def unlink(self):
        for record in self:
            if record.external_id:
                try:
                    api_url = f'http://147.93.52.105:9000/infra/line/{record.external_id}'
                    _logger.info("Sending DELETE request to: %s", api_url)
                    response = requests.delete(
                        api_url,
                        headers={'Content-Type': 'application/json'},
                        timeout=10
                    )
                    _logger.info("API DELETE %s response: %s (Status: %s)", api_url, response.text, response.status_code)
                    if response.status_code not in (200, 204):
                        _logger.warning(
                            "Failed to delete line %s in API: %s (Status: %s). Proceeding with Odoo deletion.",
                            record.enterprise_code or record.code, response.text, response.status_code
                        )
                except requests.RequestException as e:
                    _logger.error("API DELETE request failed for line %s: %s.", 
                                 record.enterprise_code or record.code, str(e))
            else:
                _logger.info("Skipping API delete for line %s: No external_id.", record.enterprise_code or record.code)

        return super(InfrastructureLine, self).unlink()

    @api.model
    def sync_lines_from_api(self):
        try:
            self.env['infrastructure.station'].sync_stations_from_api()
        except Exception as e:
            _logger.error("Failed to sync stations: %s", str(e))
            self.env['mail.activity'].create({
                'res_model': 'ir.cron',
                'res_id': self.env.ref('infrastructure_management.cron_sync_lines').id,
                'activity_type_id': self.env.ref('mail.mail_activity_data_warning').id,
                'summary': 'Line Sync Failure',
                'note': f'Failed to sync stations: {str(e)}',
                'user_id': self.env.ref('base.user_admin').id,
            })
            raise UserError(f"Failed to sync stations: {str(e)}")

        api_url = 'http://147.93.52.105:9000/infra/line'
        last_sync = self.env['ir.config_parameter'].sudo().get_param('infrastructure.line.last_sync')
        params = {}
        if last_sync:
            params['last_updated'] = last_sync
            _logger.info("Incremental sync for lines since %s", last_sync)

        _logger.info("Sending GET request to: %s with params: %s", api_url, params)

        try:
            response = requests.get(
                api_url,
                headers={'Content-Type': 'application/json'},
                params=params,
                timeout=30
            )
            _logger.info("API GET %s response: %s (Status: %s)", api_url, response.text, response.status_code)
            if response.status_code == 200:
                lines = response.json()
                current_time = datetime.now().strftime(DEFAULT_SERVER_DATETIME_FORMAT)
                self.env['ir.config_parameter'].sudo().set_param('infrastructure.line.last_sync', current_time)

                synced_count = 0
                skipped_count = 0
                for line in lines:
                    try:
                        external_id = line.get('id')
                        if not external_id:
                            _logger.warning("Skipping line with missing id: %s", line)
                            skipped_count += 1
                            continue

                        code = line.get('code', '')
                        enterprise_code = line.get('enterpriseCode', '')
                        if (
                            code.lower().startswith('test') or
                            enterprise_code.lower().startswith('test') or
                            not line.get('departureStation') or
                            not line.get('terminusStation')
                        ):
                            _logger.info(f"Skipping test line with external_id {external_id}")
                            skipped_count += 1
                            continue

                        if not code or not enterprise_code:
                            _logger.warning("Skipping line with missing code or enterpriseCode: %s", line)
                            skipped_count += 1
                            continue

                        departure_station_id = line.get('departureStation', {}).get('id')
                        if not departure_station_id:
                            _logger.warning("Skipping line with missing departureStation id: %s", code)
                            skipped_count += 1
                            continue
                        departure_station = self.env['infrastructure.station'].search(
                            [('external_id', '=', departure_station_id)], limit=1
                        )
                        if not departure_station:
                            with self.env.cr.savepoint():
                                departure_station = self.env['infrastructure.station'].create({
                                    'name_ar': line['departureStation'].get('nameAr', 'Unknown'),
                                    'name_en': line['departureStation'].get('nameEn', 'Unknown'),
                                    'name_fr': line['departureStation'].get('nameFr', 'Unknown'),
                                    'latitude': line['departureStation'].get('lat', 0.0),
                                    'longitude': line['departureStation'].get('lng', 0.0),
                                    'external_id': departure_station_id,
                                    'paths': json.dumps(line['departureStation'].get('paths', [])),
                                    'schedule': json.dumps(line['departureStation'].get('schedule', [])),
                                    'changes': json.dumps({})  # Align with API
                                })

                        terminus_station_id = line.get('terminusStation', {}).get('id')
                        if not terminus_station_id:
                            _logger.warning("Skipping line with missing terminusStation id: %s", code)
                            skipped_count += 1
                            continue
                        terminus_station = self.env['infrastructure.station'].search(
                            [('external_id', '=', terminus_station_id)], limit=1
                        )
                        if not terminus_station:
                            with self.env.cr.savepoint():
                                terminus_station = self.env['infrastructure.station'].create({
                                    'name_ar': line['terminusStation'].get('nameAr', 'Unknown'),
                                    'name_en': line['terminusStation'].get('nameEn', 'Unknown'),
                                    'name_fr': line['terminusStation'].get('nameFr', 'Unknown'),
                                    'latitude': line['terminusStation'].get('lat', 0.0),
                                    'longitude': line['terminusStation'].get('lng', 0.0),
                                    'external_id': terminus_station_id,
                                    'paths': json.dumps(line['terminusStation'].get('paths', [])),
                                    'schedule': json.dumps(line['terminusStation'].get('schedule', [])),
                                    'changes': json.dumps({})  # Align with API
                                })

                        color = line.get('color', '#FF0000')
                        if not re.match(r'^#[0-9A-Fa-f]{6}$', color):
                            _logger.warning("Invalid color format for line %s: %s. Using default #FF0000.", code, color)
                            color = '#FF0000'

                        schedule = json.dumps(line.get('schedule', []))
                        try:
                            json.loads(schedule)
                        except json.JSONDecodeError:
                            _logger.warning("Invalid schedule format for line %s: %s. Using empty schedule.", code, schedule)
                            schedule = '[]'

                        line_data = {
                            'code': code,
                            'color': color,
                            'line_type': str(line.get('lineType', 1)),
                            'enterprise_code': enterprise_code,
                            'departure_station_id': departure_station.id,
                            'terminus_station_id': terminus_station.id,
                            'schedule': schedule,
                            'external_id': external_id
                        }

                        with self.env.cr.savepoint():
                            existing_line = self.search([('external_id', '=', external_id)], limit=1)
                            if existing_line:
                                existing_line.write(line_data)
                                _logger.info("Updated line %s", external_id)
                            else:
                                self.create(line_data)
                                _logger.info("Created line %s", external_id)
                            synced_count += 1

                    except Exception as e:
                        _logger.error("Failed to sync line %s: %s", line.get('id', 'Unknown'), str(e))
                        skipped_count += 1
                        continue

                if skipped_count > 5:
                    self.env['mail.activity'].create({
                        'res_model': 'ir.cron',
                        'res_id': self.env.ref('infrastructure_management.cron_sync_lines').id,
                        'activity_type_id': self.env.ref('mail.mail_activity_data_warning').id,
                        'summary': 'Excessive Lines Skipped',
                        'note': f'Skipped {skipped_count} lines during sync. Check API data.',
                        'user_id': self.env.ref('base.user_admin').id,
                    })

                message = f"Synced {synced_count} lines, skipped {skipped_count} lines."
                _logger.info(message)
                return {
                    'synced': synced_count,
                    'skipped': skipped_count,
                    'message': message
                }

            else:
                raise UserError(f"Failed to fetch lines from API: {response.text} (Status: {response.status_code})")
        except requests.RequestException as e:
            _logger.error("Line sync failed: %s", str(e))
            self.env['mail.activity'].create({
                'res_model': 'ir.cron',
                'res_id': self.env.ref('infrastructure_management.cron_sync_lines').id,
                'activity_type_id': self.env.ref('mail.mail_activity_data_warning').id,
                'summary': 'Line Sync Failure',
                'note': f'Sync failed: {str(e)}',
                'user_id': self.env.ref('base.user_admin').id,
            })
            raise UserError(f"Line sync failed: {str(e)}")







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\models\line_station.py
import requests
import json
import logging
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError
from datetime import datetime
from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT
from psycopg2 import OperationalError

_logger = logging.getLogger(__name__)

class InfrastructureLineStation(models.Model):
    _name = 'infrastructure.line.station'
    _description = 'Infrastructure Line Station'

    order = fields.Integer(string='Order', required=True)
    stop_duration = fields.Integer(string='Stop Duration', default=0)
    direction = fields.Selection(
        [('GOING', 'Going'), ('RETURNING', 'Returning')],
        string='Direction',
        required=True
    )
    radius = fields.Integer(string='Radius', default=0)
    lat = fields.Float(string='Latitude', default=0.0)
    lng = fields.Float(string='Longitude', default=0.0)
    line_id = fields.Many2one(
        'infrastructure.line',
        string='Line',
        required=True
    )
    station_id = fields.Many2one(
        'infrastructure.station',
        string='Station',
        required=True
    )
    alertable = fields.Boolean(string='Alertable', default=False)
    efficient = fields.Boolean(string='Efficient', default=False)
    duration = fields.Integer(string='Duration', default=0)
    external_id = fields.Integer(string='External API ID', readonly=True)

    @api.constrains('lat', 'lng')
    def _check_coordinates(self):
        for record in self:
            if record.lat and (record.lat < -90 or record.lat > 90):
                raise ValidationError("Latitude must be between -90 and 90 degrees.")
            if record.lng and (record.lng < -180 or record.lng > 180):
                raise ValidationError("Longitude must be between -180 and 180 degrees.")

    @api.constrains('order', 'line_id', 'direction')
    def _check_unique_order(self):
        for record in self:
            duplicates = self.search([
                ('line_id', '=', record.line_id.id),
                ('direction', '=', record.direction),
                ('order', '=', record.order),
                ('id', '!=', record.id)
            ])
            if duplicates:
                raise ValidationError(
                    f"Order {record.order} is already used for line {record.line_id.enterprise_code} "
                    f"in direction {record.direction}."
                )

    def _prepare_station_data(self, station):
        return {
            'id': station.external_id or station.id,
            'nameAr': station.name_ar or 'Unknown',
            'nameEn': station.name_en or 'Unknown',
            'nameFr': station.name_fr or 'Unknown',
            'lat': station.latitude or 0.0,
            'lng': station.longitude or 0.0,
            'paths': json.loads(station.paths) if station.paths else [],
            'lines': [line.external_id or line.id for line in station.line_ids],
            'schedule': json.loads(station.schedule) if station.schedule else [],
            'changes': json.loads(station.changes) if station.changes else {}
        }

    def _prepare_line_data(self, line):
        departure_station = line.departure_station_id
        terminus_station = line.terminus_station_id
        return {
            'id': line.external_id or line.id,
            'code': line.code or 'LINE',
            'color': line.color or '#000000',
            'departureStation': departure_station.name_en or 'Unknown' if departure_station else 'Unknown',
            'departureAddress': departure_station.name_en or 'Unknown' if departure_station else 'Unknown',
            'terminusStation': terminus_station.name_en or 'Unknown' if terminus_station else 'Unknown',
            'terminusAddress': terminus_station.name_en or 'Unknown' if terminus_station else 'Unknown',
            'schedule': json.loads(line.schedule) if line.schedule else ['08:00']
        }

    def _sync_to_api(self, record):
        """Helper method to sync a record to the API via POST if no external_id exists."""
        if record.external_id:
            return record.external_id

        station = self.env['infrastructure.station'].browse(record.station_id.id)
        line = self.env['infrastructure.line'].browse(record.line_id.id)
        if not line.external_id or not station.external_id:
            raise UserError("Cannot sync to API: Line or station missing external_id.")

        api_data = {
            'order': record.order,
            'stopDuration': record.stop_duration,
            'direction': record.direction,
            'radius': record.radius,
            'lat': record.lat or station.latitude or 0.0,
            'lng': record.lng or station.longitude or 0.0,
            'line': self._prepare_line_data(line),
            'station': self._prepare_station_data(station),
            'alertable': record.alertable,
            'efficient': record.efficient,
            'duration': record.duration
        }

        try:
            api_url = 'http://147.93.52.105:9000/infra/linestation'
            payload = json.dumps(api_data, ensure_ascii=False).encode('utf-8')
            _logger.info("Sending POST request to: %s with payload: %s", api_url, payload.decode('utf-8'))
            response = requests.post(
                api_url,
                headers={'Content-Type': 'application/json; charset=utf-8'},
                data=payload,
                timeout=10
            )
            _logger.info("API POST %s response: %s (Status: %s)", api_url, response.text, response.status_code)
            if response.status_code == 201:
                try:
                    response_data = response.json()
                    external_id = response_data.get('id')
                    if not external_id:
                        raise ValueError("No external_id in JSON response")
                except json.JSONDecodeError:
                    response_text = response.text.strip()
                    if "Line Station created with id:" in response_text:
                        try:
                            external_id = int(response_text.split("Line Station created with id:")[1].strip())
                        except (IndexError, ValueError):
                            raise UserError(f"Failed to parse external_id from response: {response_text}")
                    else:
                        raise UserError(f"Unexpected API response format: {response_text}")
                
                self._cr.execute('UPDATE infrastructure_line_station SET external_id = %s WHERE id = %s', (external_id, record.id))
                _logger.info("Assigned external_id %s to line station %s", external_id, record.id)
                return external_id
            else:
                raise UserError(f"Failed to create line station in API: {response.text} (Status: {response.status_code})")
        except requests.RequestException as e:
            _logger.error("API POST request failed: %s", str(e))
            raise UserError(f"API request failed: {str(e)}")

    @api.model
    def create(self, vals):
        # Check for duplicates
        line_id = vals.get('line_id')
        direction = vals.get('direction')
        order = vals.get('order')
        if line_id and direction and order:
            existing = self.search([
                ('line_id', '=', line_id),
                ('direction', '=', direction),
                ('order', '=', order)
            ])
            if existing:
                raise UserError(
                    f"Order {order} is already used for line {existing.line_id.enterprise_code} "
                    f"in direction {direction}."
                )

        record = super(InfrastructureLineStation, self).create(vals)
        try:
            record._sync_to_api(record)
        except Exception as e:
            _logger.error("Failed to sync line station %s to API: %s", record.id, str(e))
            raise UserError(f"Failed to sync line station to API: {str(e)}")

        return record

    def write(self, vals):
        result = super(InfrastructureLineStation, self).write(vals)
        for record in self:
            if not record.external_id:
                try:
                    record._sync_to_api(record)
                except Exception as e:
                    _logger.error("Failed to sync line station %s to API: %s", record.id, str(e))
                    continue

            station = self.env['infrastructure.station'].browse(record.station_id.id)
            line = self.env['infrastructure.line'].browse(record.line_id.id)
            api_data = {
                'order': record.order,
                'stopDuration': record.stop_duration,
                'direction': record.direction,
                'radius': record.radius,
                'lat': record.lat or station.latitude or 0.0,
                'lng': record.lng or station.longitude or 0.0,
                'line': self._prepare_line_data(line),
                'station': self._prepare_station_data(station),
                'alertable': record.alertable,
                'efficient': record.efficient,
                'duration': record.duration
            }

            try:
                api_url = f'http://147.93.52.105:9000/infra/linestation/{record.external_id}'
                payload = json.dumps(api_data, ensure_ascii=False).encode('utf-8')
                _logger.info("Sending PUT request to: %s with payload: %s", api_url, payload.decode('utf-8'))
                response = requests.put(
                    api_url,
                    headers={'Content-Type': 'application/json; charset=utf-8'},
                    data=payload,
                    timeout=10
                )
                _logger.info("API PUT %s response: %s (Status: %s)", api_url, response.text, response.status_code)
                # Accept 200, 201, 204 as success, or check response text
                if response.status_code in (200, 201, 204) or "updated successfully" in response.text.lower():
                    _logger.info("Line station %s updated successfully in API", record.external_id)
                else:
                    _logger.error("API PUT failed: %s (Status: %s)", response.text, response.status_code)
                    raise UserError(f"Failed to update line station in API: {response.text} (Status: {response.status_code})")
            except requests.RequestException as e:
                _logger.error("API PUT request failed: %s", str(e))
                raise UserError(f"API request failed: {str(e)}")

        return result

    def unlink(self):
        for record in self:
            if record.external_id:
                try:
                    api_url = f'http://147.93.52.105:9000/infra/linestation/{record.external_id}'
                    _logger.info("Sending DELETE request to: %s", api_url)
                    response = requests.delete(
                        api_url,
                        headers={'Content-Type': 'application/json'},
                        timeout=10
                    )
                    _logger.info("API DELETE %s response: %s (Status: %s)", api_url, response.text, response.status_code)
                    if response.status_code not in (200, 204):
                        _logger.warning("API DELETE failed: %s (Status: %s)", response.text, response.status_code)
                except requests.RequestException as e:
                    _logger.error("API DELETE request failed: %s", str(e))
                    raise UserError(f"API DELETE request failed: {str(e)}")

        return super(InfrastructureLineStation, self).unlink()

    @api.model
    def clean_duplicates(self):
        _logger.info("Cleaning duplicate line stations")
        records = self.search([
            ('line_id', '!=', False),
            ('direction', '!=', False),
            ('order', '!=', False)
        ], order='line_id, direction, order, id')
        seen_keys = set()
        for record in records:
            key = (record.line_id.id, record.direction, record.order)
            if key in seen_keys:
                _logger.info("Deleting duplicate line station id %s (line %s, %s, order %s)",
                             record.id, record.line_id.enterprise_code, record.direction, record.order)
                record.unlink()
            else:
                seen_keys.add(key)

    @api.model
    def sync_linestations_from_api(self):
        max_retries = 3
        retry_count = 0
        while retry_count < max_retries:
            try:
                with self.env.cr.savepoint():
                    self.clean_duplicates()
                    lines = self.env['infrastructure.line'].search([])
                    if not lines:
                        raise UserError("No lines found. Sync lines first.")

                    base_api_url = 'http://147.93.52.105:9000/infra/linestation'
                    directions = ['GOING', 'RETURNING']
                    created_count = 0

                    for line in lines:
                        for direction in directions:
                            params = {'lineId': line.external_id, 'direction': direction}
                            try:
                                response = requests.get(
                                    base_api_url,
                                    headers={'Content-Type': 'application/json'},
                                    params=params,
                                    timeout=30
                                )
                                _logger.info("API GET %s response: %s (Status: %s)", base_api_url, response.text, response.status_code)
                                if response.status_code == 200:
                                    line_stations = response.json()
                                    for ls in line_stations:
                                        if not ls.get('line') or not ls.get('station'):
                                            _logger.warning("Skipping line station with missing data: %s", ls.get('id', 'Unknown'))
                                            continue

                                        line_record = self.env['infrastructure.line'].search(
                                            [('external_id', '=', ls['line'].get('id'))], limit=1
                                        )
                                        station = self.env['infrastructure.station'].search(
                                            [('external_id', '=', ls['station'].get('id'))], limit=1
                                        )
                                        if not line_record or not station:
                                            _logger.warning("Line or station not found for line station %s", ls.get('id', 'Unknown'))
                                            continue

                                        # Check for existing record
                                        existing = self.search([
                                            ('line_id', '=', line_record.id),
                                            ('direction', '=', ls.get('direction')),
                                            ('order', '=', ls.get('order', 0))
                                        ], limit=1)
                                        if existing:
                                            _logger.info("Skipping duplicate line station for line %s, %s, order %s",
                                                         line_record.enterprise_code, ls.get('direction'), ls.get('order'))
                                            continue

                                        ls_data = {
                                            'order': ls.get('order', 0),
                                            'stop_duration': ls.get('stopDuration', 0),
                                            'direction': ls.get('direction'),
                                            'radius': ls.get('radius', 0),
                                            'lat': ls.get('lat', 0.0),
                                            'lng': ls.get('lng', 0.0),
                                            'line_id': line_record.id,
                                            'station_id': station.id,
                                            'alertable': ls.get('alertable', False),
                                            'efficient': ls.get('efficient', False),
                                            'duration': ls.get('duration', 0),
                                            'external_id': ls.get('id')
                                        }

                                        self.create(ls_data)
                                        created_count += 1
                                        _logger.info("Created line station %s for line %s, %s",
                                                     ls.get('id'), line_record.enterprise_code, ls.get('direction'))
                                else:
                                    _logger.warning("API GET failed: %s (Status: %s)", response.text, response.status_code)
                            except requests.RequestException as e:
                                _logger.error("API GET failed: %s", str(e))
                                continue

                    _logger.info("Synced %s line stations", created_count)
                    return {'created': created_count}
            except OperationalError as e:
                if 'could not serialize access' in str(e):
                    retry_count += 1
                    _logger.warning("Transaction conflict, retrying (%s/%s)", retry_count, max_retries)
                    if retry_count >= max_retries:
                        raise UserError("Failed to sync after retries: Transaction conflict.")
                    continue
                raise
            except Exception as e:
                _logger.error("Sync failed: %s", str(e))
                raise UserError(f"Sync failed: {str(e)}")







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\models\station.py
import requests
import json
import logging
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError
from datetime import datetime
from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT

_logger = logging.getLogger(__name__)

class InfrastructureStation(models.Model):
    _name = 'infrastructure.station'
    _description = 'Infrastructure Station'
    _rec_name = 'name_en'

    name_ar = fields.Char(string='Name (Arabic)', required=True)
    name_en = fields.Char(string='Name (English)', required=True)
    name_fr = fields.Char(string='Name (French)', required=True)
    latitude = fields.Float(string='Latitude', default=36.7538)  # Default to Algiers
    longitude = fields.Float(string='Longitude', default=3.0588)
    line_ids = fields.Many2many(
        'infrastructure.line',
        string='Lines',
        help='Select the lines associated with this station'
    )
    paths = fields.Text(string='Paths', default='[]')
    changes = fields.Text(string='Changes', default='{}')
    schedule = fields.Text(string='Schedule', default='[]')
    external_id = fields.Integer(string='External API ID', readonly=True)
    location_picker = fields.Boolean(string='Location Picker', default=True)  # Dummy field for widget

    @api.constrains('paths', 'changes', 'schedule')
    def _check_json_fields(self):
        for record in self:
            for field in ['paths', 'changes', 'schedule']:
                if record[field]:
                    try:
                        json.loads(record[field])
                    except json.JSONDecodeError:
                        raise ValidationError(f"{field.capitalize()} must be valid JSON (e.g., [], {{}}, or [\"08:00\"]).")

    def name_get(self):
        result = []
        for station in self:
            name = station.name_en or station.name_ar or station.name_fr or f'Station {station.id}'
            _logger.debug("name_get for station ID %s: %s", station.id, name)
            result.append((station.id, name))
        return result

    @api.model
    def create(self, vals):
        for field in ['paths', 'changes', 'schedule']:
            if vals.get(field):
                try:
                    json.loads(vals[field])
                except json.JSONDecodeError:
                    raise UserError(f"{field.capitalize()} must be valid JSON (e.g., [], {{}}, or [\"08:00\"]).")

        record = super(InfrastructureStation, self).create(vals)

        api_data = {
            'nameAr': record.name_ar,
            'nameEn': record.name_en,
            'nameFr': record.name_fr,
            'lat': record.latitude or 0.0,
            'lng': record.longitude or 0.0,
            'paths': json.loads(record.paths) if record.paths else [],
            'lines': [line.external_id or line.id for line in record.line_ids],
            'changes': json.loads(record.changes) if record.changes else {},
            'schedule': json.loads(record.schedule) if record.schedule else []
        }

        try:
            api_url = 'http://147.93.52.105:9000/infra/station'
            payload = json.dumps(api_data, ensure_ascii=False).encode('utf-8')
            _logger.info("Sending POST request to: %s with payload: %s", api_url, payload.decode('utf-8'))
            response = requests.post(
                api_url,
                headers={'Content-Type': 'application/json; charset=utf-8'},
                data=payload,
                timeout=10
            )
            _logger.info("API POST %s response: %s (Status: %s)", api_url, response.text, response.status_code)
            if response.status_code == 201:
                try:
                    response_data = response.json()
                    external_id = response_data.get('id')
                    if not external_id:
                        raise ValueError("No external_id found in JSON response")
                except json.JSONDecodeError:
                    response_text = response.text.strip()
                    if "Created Station with id:" in response_text:
                        try:
                            external_id = int(response_text.split("Created Station with id:")[1].strip())
                        except (IndexError, ValueError):
                            _logger.error("Unable to parse external_id from text response: %s", response_text)
                            raise UserError(f"Failed to parse external_id from API response: {response_text}")
                    else:
                        _logger.error("Unexpected response format: %s", response_text)
                        raise UserError(f"Unexpected API response format: {response_text}")
                
                self._cr.execute('UPDATE infrastructure_station SET external_id = %s WHERE id = %s', (external_id, record.id))
                _logger.info("Assigned external_id %s to station %s", external_id, record.name_en)
            else:
                raise UserError(f"Failed to create station in API: {response.text} (Status: {response.status_code})")
        except requests.RequestException as e:
            _logger.error("API POST request failed: %s", str(e))
            raise UserError(f"API request failed: {str(e)}")

        return record

    def write(self, vals):
        for field in ['paths', 'changes', 'schedule']:
            if vals.get(field):
                try:
                    json.loads(vals[field])
                except json.JSONDecodeError:
                    raise UserError(f"{field.capitalize()} must be valid JSON (e.g., [], {{}}, or [\"08:00\"]).")

        result = super(InfrastructureStation, self).write(vals)

        for record in self:
            if not record.external_id:
                _logger.warning("Skipping API update for station %s: No external_id.", record.name_en or record.id)
                continue

            api_data = {
                'nameAr': record.name_ar,
                'nameEn': record.name_en,
                'nameFr': record.name_fr,
                'lat': record.latitude or 0.0,
                'lng': record.longitude or 0.0,
                'paths': json.loads(record.paths) if record.paths else [],
                'lines': [line.external_id or line.id for line in record.line_ids],
                'changes': json.loads(record.changes) if record.changes else {},
                'schedule': json.loads(record.schedule) if record.schedule else []
            }

            try:
                api_url = f'http://147.93.52.105:9000/infra/station/{record.external_id}'
                payload = json.dumps(api_data, ensure_ascii=False).encode('utf-8')
                _logger.info("Sending PUT request to: %s with payload: %s", api_url, payload.decode('utf-8'))
                response = requests.put(
                    api_url,
                    headers={'Content-Type': 'application/json; charset=utf-8'},
                    data=payload,
                    timeout=10
                )
                _logger.info("API PUT %s response: %s (Status: %s)", api_url, response.text, response.status_code)
                if response.status_code not in (200, 201, 204):
                    raise UserError(f"Failed to update station in API: {response.text} (Status: {response.status_code})")
            except requests.RequestException as e:
                _logger.error("API PUT request failed: %s", str(e))
                raise UserError(f"API request failed: {str(e)}")

        return result

    def unlink(self):
        for record in self:
            if record.external_id:
                try:
                    api_url = f'http://147.93.52.105:9000/infra/station/{record.external_id}'
                    _logger.info("Sending DELETE request to: %s", api_url)
                    response = requests.delete(
                        api_url,
                        headers={'Content-Type': 'application/json'},
                        timeout=10
                    )
                    _logger.info("API DELETE %s response: %s (Status: %s)", api_url, response.text, response.status_code)
                    if response.status_code not in (200, 204):
                        _logger.warning(
                            "Failed to delete station %s in API: %s (Status: %s). Proceeding with Odoo deletion.",
                            record.name_en or record.id, response.text, response.status_code
                        )
                except requests.RequestException as e:
                    _logger.error("API DELETE request failed for station %s: %s.", record.name_en or record.id, str(e))
            else:
                _logger.info("Skipping API delete for station %s: No external_id.", record.name_en or record.id)

        return super(InfrastructureStation, self).unlink()

    @api.model
    def sync_stations_from_api(self):
        api_url = 'http://147.93.52.105:9000/infra/station'
        last_sync = self.env['ir.config_parameter'].sudo().get_param('infrastructure.station.last_sync')
        params = {}
        if last_sync:
            params['last_updated'] = last_sync
            _logger.info("Incremental sync for stations since %s", last_sync)

        _logger.info("Sending GET request to: %s with params: %s", api_url, params)

        try:
            response = requests.get(
                api_url,
                headers={'Content-Type': 'application/json'},
                params=params,
                timeout=30
            )
            _logger.info("API GET %s response: %s (Status: %s)", api_url, response.text, response.status_code)
            if response.status_code == 200:
                stations = response.json()
                current_time = datetime.now().strftime(DEFAULT_SERVER_DATETIME_FORMAT)
                self.env['ir.config_parameter'].sudo().set_param('infrastructure.station.last_sync', current_time)

                synced_count = 0
                skipped_count = 0
                api_station_ids = set()

                for station in stations:
                    try:
                        external_id = station.get('id')
                        if not external_id:
                            _logger.warning("Skipping station with missing id: %s", station)
                            skipped_count += 1
                            continue

                        api_station_ids.add(external_id)

                        name_ar = station.get('nameAr', '')
                        name_en = station.get('nameEn', '')
                        name_fr = station.get('nameFr', '')
                        if not name_ar or not name_en or not name_fr:
                            _logger.warning("Skipping station with missing required name fields: %s", station)
                            skipped_count += 1
                            continue

                        line_ids = []
                        for line_id in station.get('lines', []):
                            line = self.env['infrastructure.line'].search(
                                [('external_id', '=', line_id)], limit=1
                            )
                            if line:
                                line_ids.append(line.id)
                            else:
                                _logger.warning("Line with external_id %s not found for station %s", line_id, external_id)

                        paths = json.dumps(station.get('paths', []))
                        changes = json.dumps(station.get('changes', {}) if station.get('changes') is not None else {})
                        schedule = json.dumps(station.get('schedule', []))
                        for field, value in [('paths', paths), ('changes', changes), ('schedule', schedule)]:
                            try:
                                json.loads(value)
                            except json.JSONDecodeError:
                                _logger.warning("Invalid %s format for station %s: %s. Using default.", field, external_id, value)
                                if field == 'paths':
                                    paths = '[]'
                                elif field == 'changes':
                                    changes = '{}'
                                elif field == 'schedule':
                                    schedule = '[]'

                        station_data = {
                            'name_ar': name_ar,
                            'name_en': name_en,
                            'name_fr': name_fr,
                            'latitude': float(station.get('lat', 0.0)),
                            'longitude': float(station.get('lng', 0.0)),
                            'paths': paths,
                            'changes': changes,
                            'schedule': schedule,
                            'line_ids': [(6, 0, line_ids)],
                            'external_id': external_id
                        }

                        with self.env.cr.savepoint():
                            existing_station = self.search([('external_id', '=', external_id)], limit=1)
                            if existing_station:
                                existing_station.write(station_data)
                                _logger.info("Updated station %s", external_id)
                            else:
                                self.create(station_data)
                                _logger.info("Created station %s", external_id)
                            synced_count += 1

                    except Exception as e:
                        _logger.error("Failed to sync station %s: %s", station.get('id', 'Unknown'), str(e))
                        skipped_count += 1
                        continue

                odoo_stations = self.search([('external_id', '!=', False)])
                for station in odoo_stations:
                    if station.external_id not in api_station_ids:
                        try:
                            station.unlink()
                            _logger.info("Deleted stale station with external_id %s", station.external_id)
                        except Exception as e:
                            _logger.error("Failed to delete stale station %s: %s", station.external_id, str(e))

                if skipped_count > 10:
                    self.env['mail.activity'].create({
                        'res_model': 'ir.cron',
                        'res_id': self.env.ref('infrastructure_management.cron_sync_stations').id,
                        'activity_type_id': self.env.ref('mail.mail_activity_data_warning').id,
                        'summary': 'Excessive Stations Skipped',
                        'note': f'Skipped {skipped_count} stations during sync. Check API data.',
                        'user_id': self.env.ref('base.user_admin').id,
                    })

                message = f"Synced {synced_count} stations, skipped {skipped_count} stations."
                _logger.info(message)
                return {
                    'synced': synced_count,
                    'skipped': skipped_count,
                    'message': message
                }

            else:
                raise UserError(f"Failed to fetch stations from API: {response.text} (Status: {response.status_code})")
        except requests.RequestException as e:
            _logger.error("Station sync failed: %s", str(e))
            self.env['mail.activity'].create({
                'res_model': 'ir.cron',
                'res_id': self.env.ref('infrastructure_management.cron_sync_stations').id,
                'activity_type_id': self.env.ref('mail.mail_activity_data_warning').id,
                'summary': 'Station Sync Failure',
                'note': f'Sync failed: {str(e)}',
                'user_id': self.env.ref('base.user_admin').id,
            })
            raise UserError(f"Station sync failed: {str(e)}")







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\models\sync.py
from odoo import models, api

class InfrastructureSync(models.TransientModel):
    _name = 'infrastructure.sync'
    _description = 'Infrastructure Sync'

    def action_manual_sync(self, *args, **kwargs):
        """Trigger manual sync for Stations, Lines, and Line Stations."""
        try:
            # Sync Stations first
            self.env['infrastructure.station'].sync_stations_from_api()
            # Sync Lines (depends on Stations)
            self.env['infrastructure.line'].sync_lines_from_api()
            # Sync Line Stations (depends on Lines and Stations)
            self.env['infrastructure.line.station'].sync_linestations_from_api()
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Success',
                    'message': 'Manual synchronization completed successfully.',
                    'type': 'success',
                    'sticky': False,
                }
            }
        except Exception as e:
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Error',
                    'message': f'Manual synchronization failed: {str(e)}',
                    'type': 'danger',
                    'sticky': True,
                }
            }







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\models\__init__.py
from . import line
from . import station
from . import line_station
from . import sync









// [Folder] security








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\security\ir.model.access.csv
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_infrastructure_line,infrastructure.line,model_infrastructure_line,base.group_user,1,1,1,1
access_infrastructure_station,infrastructure.station,model_infrastructure_station,base.group_user,1,1,1,1
access_infrastructure_line_station,infrastructure.line.station,model_infrastructure_line_station,base.group_user,1,1,1,1
access_infrastructure_sync,infrastructure.sync,model_infrastructure_sync,base.group_system,1,1,1,1









// [Folder] static








//   [Folder] src








//     [Folder] xml








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\static\src\xml\line_map_templates.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="infrastructure_management.line_map">
        <div class="o_line_map_container" style="height: 100%; width: 100%;">
            <div t-ref="map" id="line_map" style="height: 600px; width: 100%;"></div>
        </div>
    </t>
</templates>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\static\src\xml\line_station_map_templates.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="infrastructure_management.LineStationMapTemplate">
        <div class="o_line_station_map_container" style="height: 100%; width: 100%;">
            <div t-ref="map" id="map" style="height: 100%; width: 100%;"></div>
        </div>
    </t>
</templates>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\static\src\xml\station_location_picker_templates.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">
    <t t-name="infrastructure_management.StationLocationPickerTemplate">
        <div class="o_station_location_picker" style="width: 100%; height: 300px; position: relative; z-index: 0;">
            <div t-ref="map" style="width: 100%; height: 100%;"></div>
        </div>
    </t>
</templates>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\static\src\xml\station_map_templates.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="infrastructure_management.StationMapTemplate">
        <div class="o_station_map_container" style="height: 100%; width: 100%;">
            <div t-ref="map" id="map" style="height: 600px; width: 100%;"></div>
        </div>
    </t>
</templates>













// [Folder] views








// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\views\line_station_views.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Delete conflicting ir.actions.act_window record -->
        <delete model="ir.actions.act_window" id="infrastructure_management.action_infrastructure_line_station_map"/>

        <!-- Line Station Tree View -->
        <record id="view_infrastructure_line_station_tree" model="ir.ui.view">
            <field name="name">infrastructure.line.station.tree</field>
            <field name="model">infrastructure.line.station</field>
            <field name="arch" type="xml">
                <tree string="Line Stations">
                    <field name="order"/>
                    <field name="stop_duration"/>
                    <field name="direction"/>
                    <field name="radius"/>
                    <field name="lat"/>
                    <field name="lng"/>
                    <field name="line_id" widget="many2one"/>
                    <field name="station_id" widget="many2one"/>
                    <field name="alertable"/>
                    <field name="efficient"/>
                    <field name="duration"/>
                    <field name="external_id" readonly="1"/>
                </tree>
            </field>
        </record>

        <!-- Line Station Form View -->
        <record id="view_infrastructure_line_station_form" model="ir.ui.view">
            <field name="name">infrastructure.line.station.form</field>
            <field name="model">infrastructure.line.station</field>
            <field name="arch" type="xml">
                <form string="Line Station">
                    <sheet>
                        <group>
                            <group string="Line Station Details">
                                <field name="order" required="1"/>
                                <field name="stop_duration"/>
                                <field name="direction" required="1"/>
                                <field name="radius"/>
                                <field name="lat"/>
                                <field name="lng"/>
                                <field name="alertable"/>
                                <field name="efficient"/>
                                <field name="duration"/>
                                <field name="external_id" readonly="1"/>
                            </group>
                            <group string="References">
                                <field name="line_id" required="1" widget="selection" options="{'no_create': True, 'no_open': True}"/>
                                <field name="station_id" required="1" widget="selection" options="{'no_create': True, 'no_open': True}"/>
                            </group>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>

        <!-- Line Station Search View -->
        <record id="view_infrastructure_line_station_search" model="ir.ui.view">
            <field name="name">infrastructure.line.station.search</field>
            <field name="model">infrastructure.line.station</field>
            <field name="arch" type="xml">
                <search string="Line Stations">
                    <field name="line_id"/>
                    <field name="station_id"/>
                    <field name="external_id"/>
                    <filter string="Going Direction" name="going_direction" domain="[('direction', '=', 'GOING')]"/>
                    <filter string="Returning Direction" name="returning_direction" domain="[('direction', '=', 'RETURNING')]"/>
                    <filter string="With External ID" name="with_external_id" domain="[('external_id', '!=', False)]"/>
                    <group expand="0" string="Group By">
                        <filter string="Line" name="group_by_line" context="{'group_by': 'line_id'}"/>
                        <filter string="Station" name="group_by_station" context="{'group_by': 'station_id'}"/>
                        <filter string="Direction" name="group_by_direction" context="{'group_by': 'direction'}"/>
                    </group>
                </search>
            </field>
        </record>

        <!-- Line Station List Action -->
        <record id="action_infrastructure_line_station" model="ir.actions.act_window">
            <field name="name">Line Stations</field>
            <field name="res_model">infrastructure.line.station</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_infrastructure_line_station_tree"/>
            <field name="search_view_id" ref="view_infrastructure_line_station_search"/>
        </record>

        <!-- Line Station Map Action -->
        <record id="action_infrastructure_line_station_map" model="ir.actions.client">
            <field name="name">Line Stations Map</field>
            <field name="tag">line_station_map_tag</field>
        </record>
    </data>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\views\line_views.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Line Tree View -->
        <record id="view_infrastructure_line_tree" model="ir.ui.view">
            <field name="name">infrastructure.line.tree</field>
            <field name="model">infrastructure.line</field>
            <field name="arch" type="xml">
                <tree string="Lines">
                    <field name="enterprise_code"/>
                    <field name="code"/>
                    <field name="color" widget="color"/>
                    <field name="departure_station_id" widget="many2one"/>
                    <field name="terminus_station_id" widget="many2one"/>
                    <field name="external_id" readonly="1"/>
                </tree>
            </field>
        </record>

        <!-- Line Form View -->
        <record id="view_infrastructure_line_form" model="ir.ui.view">
            <field name="name">infrastructure.line.form</field>
            <field name="model">infrastructure.line</field>
            <field name="arch" type="xml">
                <form string="Line">
                    <sheet>
                        <group>
                            <group string="Line Details">
                                <field name="enterprise_code" required="1"/>
                                <field name="code" required="1"/>
                                <field name="color" required="1" widget="color"/>
                                <field name="external_id" readonly="1"/>
                            </group>
                            <group string="Stations">
                                <field name="departure_station_id" widget="selection" options="{'no_create': True, 'no_open': True}"/>
                                <field name="terminus_station_id" widget="selection" options="{'no_create': True, 'no_open': True}"/>
                            </group>
                        </group>
                        <group string="Additional Information">
                            <field name="schedule"/>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>

        <!-- Line Search View -->
        <record id="view_infrastructure_line_search" model="ir.ui.view">
            <field name="name">infrastructure.line.search</field>
            <field name="model">infrastructure.line</field>
            <field name="arch" type="xml">
                <search string="Lines">
                    <field name="enterprise_code"/>
                    <field name="code"/>
                    <field name="external_id"/>
                    <filter string="With External ID" name="with_external_id" domain="[('external_id', '!=', False)]"/>
                    <group expand="0" string="Group By">
                        <filter string="Departure Station" name="group_by_departure" context="{'group_by': 'departure_station_id'}"/>
                        <filter string="Terminus Station" name="group_by_terminus" context="{'group_by': 'terminus_station_id'}"/>
                    </group>
                </search>
            </field>
        </record>

        <!-- Line List Action -->
        <record id="action_infrastructure_line" model="ir.actions.act_window">
            <field name="name">Lines</field>
            <field name="res_model">infrastructure.line</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_infrastructure_line_tree"/>
            <field name="search_view_id" ref="view_infrastructure_line_search"/>
        </record>

        <!-- Delete the old ir.actions.act_window record -->
        <delete model="ir.actions.act_window" id="infrastructure_management.action_infrastructure_line_map"/>

        <!-- Line Map Action (Client Action for OWL Component) -->
        <record id="action_infrastructure_line_map" model="ir.actions.client">
            <field name="name">Lines Map</field>
            <field name="tag">line_map_tag</field>
        </record>

        <!-- Remove Manual Sync Action -->
        <delete model="ir.actions.server" id="infrastructure_management.action_sync_lines"/>
    </data>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\views\menu.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Top-level menu: Infrastructure -->
        <menuitem
            id="menu_infrastructure_root"
            name="Infrastructure"
            sequence="10"
        />

        <!-- Stations sub-menu -->
        <menuitem
            id="menu_infrastructure_stations"
            name="Stations"
            parent="menu_infrastructure_root"
            sequence="10"
        />

        <!-- Stations: List View -->
        <menuitem
            id="menu_infrastructure_stations_list"
            name="List View"
            parent="menu_infrastructure_stations"
            action="infrastructure_management.action_infrastructure_station"
            sequence="10"
        />

        <!-- Stations: Map View -->
        <menuitem
            id="menu_infrastructure_stations_map"
            name="Map View"
            parent="menu_infrastructure_stations"
            action="infrastructure_management.action_infrastructure_station_map"
            sequence="20"
        />

        <!-- Lines sub-menu -->
        <menuitem
            id="menu_infrastructure_lines"
            name="Lines"
            parent="menu_infrastructure_root"
            sequence="20"
        />

        <!-- Lines: List View -->
        <menuitem
            id="menu_infrastructure_lines_list"
            name="List View"
            parent="menu_infrastructure_lines"
            action="infrastructure_management.action_infrastructure_line"
            sequence="10"
        />

        <!-- Lines: Map View -->
        <menuitem
            id="menu_infrastructure_lines_map"
            name="Map View"
            parent="menu_infrastructure_lines"
            action="infrastructure_management.action_infrastructure_line_map"
            sequence="20"
        />

        <!-- Line Stations sub-menu -->
        <menuitem
            id="menu_infrastructure_line_stations"
            name="Line Stations"
            parent="menu_infrastructure_root"
            sequence="30"
        />

        <!-- Line Stations: List View -->
        <menuitem
            id="menu_infrastructure_line_stations_list"
            name="List View"
            parent="menu_infrastructure_line_stations"
            action="infrastructure_management.action_infrastructure_line_station"
            sequence="10"
        />

        <!-- Line Stations: Map View -->
        <menuitem
            id="menu_infrastructure_line_stations_map"
            name="Map View"
            parent="menu_infrastructure_line_stations"
            action="infrastructure_management.action_infrastructure_line_station_map"
            sequence="20"
        />
    </data>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\views\station_views.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <record id="view_infrastructure_station_tree" model="ir.ui.view">
            <field name="name">infrastructure.station.tree</field>
            <field name="model">infrastructure.station</field>
            <field name="arch" type="xml">
                <tree string="Stations">
                    <field name="name_en"/>
                    <field name="name_ar"/>
                    <field name="name_fr"/>
                    <field name="latitude"/>
                    <field name="longitude"/>
                    <field name="line_ids" widget="many2many_tags"/>
                    <field name="external_id" readonly="1"/>
                </tree>
            </field>
        </record>

        <record id="view_infrastructure_station_form" model="ir.ui.view">
            <field name="name">infrastructure.station.form</field>
            <field name="model">infrastructure.station</field>
            <field name="arch" type="xml">
                <form string="Station">
                    <sheet>
                        <group>
                            <group string="Station Details">
                                <field name="name_en" required="1"/>
                                <field name="name_ar" required="1"/>
                                <field name="name_fr" required="1"/>
                                <field name="external_id" readonly="1"/>
                            </group>
                            <group string="Location">
                                <field name="location_picker" widget="station_location_picker"/>
                                <field name="latitude"/>
                                <field name="longitude"/>
                            </group>
                        </group>
                        <group string="Additional Information">
                            <field name="paths"/>
                            <field name="schedule"/>
                            <field name="changes"/>
                            <field name="line_ids" widget="many2many_tags"/>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>

        <record id="view_infrastructure_station_search" model="ir.ui.view">
            <field name="name">infrastructure.station.search</field>
            <field name="model">infrastructure.station</field>
            <field name="arch" type="xml">
                <search string="Stations">
                    <field name="name_en"/>
                    <field name="name_ar"/>
                    <field name="name_fr"/>
                    <field name="external_id"/>
                    <filter string="With External ID" name="with_external_id" domain="[('external_id', '!=', False)]"/>
                    <filter string="Without External ID" name="without_external_id" domain="[('external_id', '=', False)]"/>
                    <group expand="0" string="Group By">
                        <filter string="Lines" name="group_by_lines" context="{'group_by': 'line_ids'}"/>
                    </group>
                </search>
            </field>
        </record>

        <record id="action_infrastructure_station" model="ir.actions.act_window">
            <field name="name">Stations</field>
            <field name="res_model">infrastructure.station</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_infrastructure_station_tree"/>
            <field name="search_view_id" ref="view_infrastructure_station_search"/>
        </record>

        <record id="action_infrastructure_station_map" model="ir.actions.client">
            <field name="name">Stations Map</field>
            <field name="tag">station_map_tag</field>
        </record>
    </data>
</odoo>







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\views\sync_views.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Sync Form View -->
        <record id="view_infrastructure_sync_form" model="ir.ui.view">
            <field name="name">infrastructure.sync.form</field>
            <field name="model">infrastructure.sync</field>
            <field name="arch" type="xml">
                <form string="Manual Sync">
                    <sheet>
                        <group>
                            <p>Click the button below to manually synchronize Stations, Lines, and Line Stations from the external API.</p>
                        </group>
                        <footer>
                            <button name="action_manual_sync" type="object" string="Sync Now" class="btn-primary"/>
                            <button special="cancel" string="Cancel" class="btn-secondary"/>
                        </footer>
                    </sheet>
                </form>
            </field>
        </record>

        <!-- Sync Action -->
        <record id="action_infrastructure_sync" model="ir.actions.act_window">
            <field name="name">Manual Sync</field>
            <field name="res_model">infrastructure.sync</field>
            <field name="view_mode">form</field>
            <field name="view_id" ref="view_infrastructure_sync_form"/>
            <field name="target">new</field>
        </record>

        <!-- Menu Item -->
        <menuitem
            id="menu_infrastructure_sync"
            name="Manual Sync"
            parent="menu_infrastructure_root"
            action="action_infrastructure_sync"
            sequence="40"
        />
    </data>
</odoo>









// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\__init__.py
from . import models







// C:\Users\kebic\OneDrive\Desktop\rest_api_v1\odoo\odoo\custom_addons\infrastructure_management\__manifest__.py
{
    'name': 'Infrastructure Management',
    'version': '1.15',  # Incremented from 1.12
    'summary': 'Manage transportation lines, stations, and line stations',
    'description': 'A module to manage lines, stations, line stations, and integrate with etrans_infrastructure API.',
    'category': 'Tools',
    'author': 'kebiche fouez',
    'depends': ['base', 'web', 'mail'],
    'data': [
        'security/ir.model.access.csv',
        'data/cron.xml',
        'views/line_views.xml',
        'views/station_views.xml',
        'views/line_station_views.xml',
        'views/menu.xml',
        'views/sync_views.xml',
    ],
    'assets': {
        'web.assets_backend': [
            'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css',
            'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js',
            'https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js',
            'https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css',
            'https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css',
            'infrastructure_management/static/src/css/station_map.css',
            'infrastructure_management/static/src/css/line_map.css',
            'infrastructure_management/static/src/css/line_station_map.css',
            'infrastructure_management/static/src/js/station_map.js',
            'infrastructure_management/static/src/js/line_map.js',
            'infrastructure_management/static/src/js/line_station_map.js',
            'infrastructure_management/static/src/js/station_location_picker.js',
            'infrastructure_management/static/src/xml/station_map_templates.xml',
            'infrastructure_management/static/src/xml/line_map_templates.xml',
            'infrastructure_management/static/src/xml/line_station_map_templates.xml',
            'infrastructure_management/static/src/xml/station_location_picker_templates.xml',  # Added
        ],
    },
    'installable': True,
    'application': True,
    'license': 'LGPL-3',
}